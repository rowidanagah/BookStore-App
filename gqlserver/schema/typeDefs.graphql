scalar UUID

enum BookGenres {
  fantasy
  fiction
  mystery
  horror
  adventure
}

type Book {
  id: UUID!
  title: String!
  author: String!
  price: Float
  genres: BookGenres
}

type User {
  id: ID!
  username: String!
  email: String!
  first_name: String
  last_name: String
  password1: String!
  password2: String!
}

"""
A Custom type for Auth Object
"""
type AuthPayload {
  """
  A jwt token returned after a successful auth
  """
  token: String!
  """
  A user that was authenticated and logged in
  """
  user: User!
}

type FavoriteBook {
  user: User!
  book: [Book!]!
}

"""
The input sent with the postPhoto Mutation
"""
input PostBookInput {
  title: String!
  author: String
  genre: BookGenres = fiction
  """
  (optional) A brief recap of the photo
  """
  recap: String
  price: Float
}

input RegistrationInput {
  username: String!
  email: String!
  password1: String!
  password2: String!
}

input FavoriteBookInput {
  bookid: UUID
  # user: User!
}
type Query {
  book(book_uuid: UUID!): Book!
  getBooks: [Book!]
  getFavoriteBooks: [Book!]
  UserInfo(token: String!): User!
}

type Mutation {
  register(UserinputData: RegistrationInput!): AuthPayload
  login(username: String!, password: String!): AuthPayload
  addBook(bookInfo: PostBookInput!): Book!
  rmBook(book_uuid: UUID!): Boolean!
  addFavoriteBook(input: FavoriteBookInput): Book!
}
